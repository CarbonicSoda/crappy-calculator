(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const u of a.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&i(u)}).observe(document,{childList:!0,subtree:!0});function t(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerPolicy&&(a.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?a.credentials="include":n.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(n){if(n.ep)return;n.ep=!0;const a=t(n);fetch(n.href,a)}})();const v=4;var o=(e=>(e[e.Bracket=0]="Bracket",e[e.UnaryOperator=1]="UnaryOperator",e[e.BinaryOperator=2]="BinaryOperator",e[e.Numeral=3]="Numeral",e))(o||{}),h=(e=>(e[e.Left=0]="Left",e[e.Right=1]="Right",e))(h||{}),m=(e=>(e[e.Pos=0]="Pos",e[e.Neg=1]="Neg",e))(m||{}),s=(e=>(e[e.Add=0]="Add",e[e.Sub=1]="Sub",e[e.Mul=2]="Mul",e[e.Div=3]="Div",e[e.Pow=4]="Pow",e))(s||{}),c=(e=>(e[e.Unset=0]="Unset",e[e.Numeral=1]="Numeral",e[e.Unary=2]="Unary",e[e.Binary=3]="Binary",e))(c||{});function w(e){const r=e.length,t=[];for(;e.length;){const i=r-e.length,n=U(e,t,i);if(!n)throw new SyntaxError(`Unknown symbol at index ${i}.`);e=e.slice(n.length)}return t}const N={[o.Bracket]:/[\(\)]/,[o.UnaryOperator]:/[\+\-]/,[o.BinaryOperator]:/[\+\-\*\/\^]/,[o.Numeral]:/\d+(?:\.\d+)?(?:[eE](?:[\+\-])?\d+)?/};function U(e,r,t){let i;for(let n=0;n<v;n++){const a=new RegExp(`^\\s*${N[n].source}\\s*`);if(i=e.match(a)?.[0],!i)continue;const u=i.trim();switch(n){case o.Bracket:{const l=u==="("?h.Left:h.Right,f=r.at(-1);(f?.type===o.Numeral||f?.type===o.Bracket&&f.value===h.Right)&&l===h.Left&&r.push({type:o.BinaryOperator,value:s.Mul,index:t}),r.push({type:o.Bracket,value:l,index:t});break}case o.UnaryOperator:{const l=r.at(-1);if(l?.type===void 0||l?.type===o.Bracket&&l.value===h.Left||l?.type===o.UnaryOperator||l?.type===o.BinaryOperator){r.push({type:o.UnaryOperator,value:u==="-"?m.Neg:m.Pos,index:t});break}}case o.BinaryOperator:{r.push({type:o.BinaryOperator,value:{"+":s.Add,"-":s.Sub,"*":s.Mul,"/":s.Div,"^":s.Pow}[u],index:t});break}case o.Numeral:{r.push({type:o.Numeral,value:Number(u),index:t});break}}break}return i}function k(e){if(e.length===1){const n=e[0];if(n.type!==o.Numeral)throw new SyntaxError("Invalid single token.");return y(c.Numeral,{numeral:n})}const r={kind:c.Unset,content:{}};let t=r,i=0;for(;i<e.length;){const n=e[i];switch(n.type){case o.Bracket:{const a=B(e,i),u=k(e.slice(i+1,a));switch(i=a,t.kind){case c.Unset:{if(i===e.length-1){t.kind=u.kind,t.content=u.content;break}t.kind=c.Binary,t.content=y(c.Binary,{left:u}).content;break}case c.Unary:{t.content.argument=u;break}case c.Binary:{t.content.right=u;break}}break}case o.UnaryOperator:{const a=y(c.Unary,{operator:n});switch(t.kind){case c.Unset:{t.kind=c.Unary,t.content=a.content;break}case c.Unary:{t.content.argument=a,t=a;break}case c.Binary:{t.content.right=a,t=a;break}}break}case o.BinaryOperator:{const a=n;if(t.kind===c.Binary&&!t.content.operator){t.content.operator=a;break}const u=a.value===s.Add||a.value===s.Sub,l=t.kind===c.Unary,f=y(c.Binary,{left:structuredClone(u||l?t:t.content.right),operator:a});if(u||l){t.kind=c.Binary,t.content=f.content;break}t.content.right=f,t=f;break}case o.Numeral:{const a=y(c.Numeral,{numeral:n});switch(t.kind){case c.Unset:{t.kind=c.Binary,t.content=y(c.Binary,{left:a}).content;break}case c.Unary:{t.content.argument=a;break}case c.Binary:{t.content.right=a;break}}break}}i++}return r}function B(e,r){let t=r,i=1;for(;t<e.length&&(t++,!(e[t].type===o.Bracket&&(e[t].value===h.Left?i++:i--,i===0))););if(i!==0)throw new SyntaxError(`No matching right bracket for left bracket at index ${r}`);if(t===r+1)throw new SyntaxError(`Empty brackets at index ${r}.`);return t}function y(e,r){return{kind:e,content:r}}function g(e){switch(e.kind){case c.Numeral:return e.content.numeral.value;case c.Unary:{const r=g(e.content.argument);return e.content.operator.value===m.Pos?r:-r}case c.Binary:{const r=g(e.content.left),t=g(e.content.right);switch(e.content.operator.value){case s.Add:return r+t;case s.Sub:return r-t;case s.Mul:return r*t;case s.Div:return r/t;case s.Pow:return r**t}}default:return NaN}}function b(e){return g(k(w(e)))}const d=document.getElementById("calc"),p=document.getElementById("res");p.textContent=String(b(d.getAttribute("placeholder")));d.oninput=()=>{if(d.value.length===0){p.textContent=String(b(d.getAttribute("placeholder")));return}try{p.textContent=String(b(d.value))}catch{p.textContent="Invalid Input"}};
